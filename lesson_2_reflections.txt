What happens when you initialize a repository? Why do you need to do it?

	It creates a hidden file named .git.  This files, more or less, keep track of all history changes or commits made.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging are is a temporary place to place your pending committed files.  While working directories are just a normal local directory and repositories are directories that are tracked by github.

How can you use the staging area to make sure you have one commit per logical change?

	Since the staging are is more a a pre-load space.  Once I add a file and check status to double and tripple check. I'll only add the files that makes sense to the changes at the time.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Any time you want to create another Version of a repository such as experiemental or mod change, ect.

How do the diagrams help you visualize the branch structure?

	Visually seeing something usually helps me understand a topic better.  I now understand how the commits and branches interact with each other.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Merging two branches does what it says. It merges two branches of commits together.  What we get when we do this is a combination of the two functioning under the same head branch or master.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Pros are that it can save time.  If it recongnizes that there aren't any conflicts then merging can be seamless.  Howevery, on the contrary when it does have conflicts it may take more time that if you were to manually merge on your own anyways.

[next question]